1.Print Hello my dear N times using Recursion
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter N: ");
        int n = sc.nextInt();
        printHello(n);
        sc.close();
    }

    static void printHello(int n) {
        if (n <= 0) return;
        System.out.println("Hello my dear");
        printHello(n - 1);
    }
}
#Output:
Enter N: 5
Hello my dear
Hello my dear
Hello my dear
Hello my dear
Hello my dear

2.Print Numbers from N to 1
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the value of N: ");
        int n = sc.nextInt();
        printNumbers(n);
        sc.close();
    }
    static void printNumbers(int n) {
        if (n <= 0) return;
        System.out.println(n);
        printNumbers(n - 1);
    }
}
#Output:
Enter the value of N: 3
3
2
1

3. Print Numbers from 1 to N 
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the value of N: ");
        int n = sc.nextInt();
        printNumbers(1, n);
        sc.close();
    }

    static void printNumbers(int current, int n) {
        if (current > n) return;
        System.out.println(current);
        printNumbers(current + 1, n);
    }
}
#Output:
Enter the value of N: 4
4
3
2
1

4. Find factorial of a Number using recursion 
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = sc.nextInt();
        System.out.println("Factorial of " + num + " is: " + factorial(num));
        sc.close();
    }

    static long factorial(int n) {
        if (n <= 1) return 1;
        return n * factorial(n - 1);
    }
}
#Output:
Enter a number: 5
Factorial of 5 is: 120

5. Find nth Fibonacci Number using recursion 
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter n: ");
        int n = sc.nextInt();
        System.out.println("The " + n + "th Fibonacci number is: " + fibonacci(n));
        sc.close();
    }

    static int fibonacci(int n) {
        if (n <= 1) return n;
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}
#Output:
Enter n: 10
The 10th Fibonacci number is: 55

6. Sum of first N natural Numbers using recursion 
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter N: ");
        int n = sc.nextInt();
        System.out.println("Sum of first " + n + " natural numbers is: " + sum(n));
        sc.close();
    }

    static int sum(int n) {
        if (n <= 0) return 0;
        return n + sum(n - 1);
    }
}
#Output:
Enter N: 25
Sum of first 25 natural numbers is 325

7. Find the sum of digits of a number using recursion 
#code
    class SumOfDigits {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            System.out.print("Enter a number: ");
            int num = sc.nextInt();
            System.out.println("Sum of digits: " + sumOfDigits(num));
            sc.close();
        }

        static int sumOfDigits(int n) {
            if (n == 0) return 0;
            return n % 10 + sumOfDigits(n / 10);
        }
    }
#Output:
Enter a number: 15
Sum of digits: 120

8.Count the Number of digits of a number 
#code
    public class Main {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            System.out.print("Enter a number: ");
            int num = sc.nextInt();
            System.out.println("Number of digits: " + countDigits(num));
            sc.close();
        }

        static int countDigits(int n) {
            if (n == 0) return 0;
            return 1 + countDigits(Math.abs(n / 10));
        }
    }
#Output:
Enter a number: 12
Number of digits: 2

9.Print Even Numbers from 2 to N 
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter N: ");
        int n = sc.nextInt();
        printEvenNumbers(2, n);
        sc.close();
    }

    static void printEvenNumbers(int current, int n) {
        if (current > n) return;
        System.out.println(current);
        printEvenNumbers(current + 2, n);
    }
}
Output:
Enter N: 10
2
4
6
8
10

10.Print a number in reverse 
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = sc.nextInt();
        System.out.print("Reversed number: ");
        printReverse(num);
        sc.close();
    }

    static void printReverse(int n) {
        if (n == 0) return;
        System.out.print(n % 10);
        printReverse(n / 10);
    }
}
#output:
Enter a number: 23456
Reveresed number: 65432

11.Calculate product of first N natural Numbers
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter N: ");
        int n = sc.nextInt();
        System.out.println("Product of first " + n + " natural numbers is: " + product(n));
        sc.close();
    }

    static int product(int n) {
        if (n == 1) return 1;
        return n * product(n - 1);
    }
}
#output:
Enter N: 10
Prouduct of first 10 natural numbers is 3628800

12.Print sum of an array using Recursion 
#code
public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        System.out.println("Sum of array elements: " + sumArray(arr, arr.length));
    }

    static int sumArray(int[] arr, int n) {
        if (n <= 0) return 0;
        return arr[n - 1] + sumArray(arr, n - 1);
    }
}
#Output:
Sum of array elements: 15

13.Print all elements of an array using recursion
public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        System.out.print("Array elements are: ");
        printArray(arr, 0);
    }

    static void printArray(int[] arr, int index) {
        if (index >= arr.length) return;
        System.out.print(arr[index] + " ");
        printArray(arr, index + 1);
    }
}
#Output:
Array elements are: 1 2 3 4 5

14.Calculate sum of squares of first N numbers using recursion
#code
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter N: ");
        int n = sc.nextInt();
        System.out.println("Sum of squares of first " + n + " numbers is: " + sumOfSquares(n));
        sc.close();
    }

    static int sumOfSquares(int n) {
        if (n <= 0) return 0;
        return n * n + sumOfSquares(n - 1);
    }
)
#Output:
Enter N: 5
Sum of squares of first 4 numbers is 55

15.Check if number is palindrome
#code:
public class Main {
    static int reverseNumber(int num, int rev) {
        if (num == 0) {
            return rev;
        }
        rev = rev * 10 + num % 10;
        return reverseNumber(num / 10, rev);
    }
    static boolean isPalindrome(int num) {
        return num == reverseNumber(num, 0);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int number = sc.nextInt();

        if (isPalindrome(number)) {
            System.out.println(number + " is a palindrome.");
        } else {
            System.out.println(number + " is not a palindrome.");
        }

        sc.close();
    }
}
#output:
Enter a number: 12321
12321 is a palindrome.
Enter a number: 1359349
1359349 is not a palindrome.
